import logging
from aiogram.types import ParseMode
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, Message
import io
import random
from typing import Union
from sets import *
from klava import *
from mst import *
from db import*
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from typing import Union

class AdminState(StatesGroup):
    waiting_for_new_url = State()
    
logging.basicConfig(level=logging.INFO)

def hlink(label: str, url: str) -> str:
    return f'<a href="{url}">{label}</a>'

storage = MemoryStorage()
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=storage)

registration_url = "https://1wpgyc.xyz/casino/list?open=register"

@dp.message_handler(commands=['admin'], state="*")
async def admin_command(message: types.Message, state: FSMContext):
    if message.from_user.id == ADMIN_ID:
        await AdminState.waiting_for_new_url.set()
        admin_keyboard = InlineKeyboardMarkup()
        change_url_btn = InlineKeyboardButton("üîó –°–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É", callback_data='change_url')
        admin_keyboard.add(change_url_btn)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=admin_keyboard)
    else:
        await state.finish()
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")

@dp.callback_query_handler(lambda c: c.data == 'change_url', state=AdminState.waiting_for_new_url)
async def handle_change_url(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π URL –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:")

@dp.message_handler(state=AdminState.waiting_for_new_url)
async def change_registration_url(message: types.Message, state: FSMContext):
    global registration_url
    registration_url = message.text
    await message.answer(f"URL —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω: {registration_url}")
    await state.finish()

@dp.callback_query_handler(lambda c: c.data == 'main_menu')
async def main_menu_handler(callback_query: types.CallbackQuery):
    await send_welcome_message(callback_query.message)


@dp.message_handler(commands=['start'])
async def start_command(message: types.Message, state: FSMContext):
    await state.finish()
    await send_welcome_message(message)

async def send_welcome_message(message_or_query):
    welcome_text = (
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ üî∏<b>MINES OpenAI</b>üî∏!\n\n"
        "üí£Mines - —ç—Ç–æ –≥—ç–º–±–ª–∏–Ω–≥ –∏–≥—Ä–∞ –≤ –±—É–∫–º–µ–∫–µ—Ä—Å–∫–æ–π –∫–æ–Ω—Ç–æ—Ä–µ 1win, "
        "–∫–æ—Ç–æ—Ä–∞—è –æ—Å–Ω–æ–≤—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–º ‚Äú–°–∞–ø—ë—Ä–µ‚Äù.\n"
        "–í–∞—à–∞ —Ü–µ–ª—å - –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —è—á–µ–π–∫–∏ –∏ –Ω–µ –ø–æ–ø–∞–¥–∞—Ç—å—Å—è –≤ –ª–æ–≤—É—à–∫–∏.\n\n\n"
        "<b><code style=\"color: blue;\">"
        "–ù–∞—à –±–æ—Ç –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –æ—Ç OpenAI.\n"
        "–û–Ω –º–æ–∂–µ—Ç –ø—Ä–µ–¥—É–≥–∞–¥–∞—Ç—å —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∑–≤—ë–∑–¥ —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 85%."
        "</code></b>"
    )
    keyboard = InlineKeyboardMarkup(row_width=2)
    reg_btn = InlineKeyboardButton("üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data='registration')
    instr_btn = InlineKeyboardButton("üìö –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data='instruction')
    signal_btn = InlineKeyboardButton("‚ùó–í—ã–¥–∞—Ç—å —Å–∏–≥–Ω–∞–ª‚ùó", callback_data='signal')
    keyboard.add(reg_btn, instr_btn, signal_btn)

    if isinstance(message_or_query, types.Message):
        await message_or_query.answer(welcome_text, reply_markup=keyboard, parse_mode=ParseMode.HTML)
    else: 
        await message_or_query.bot.send_message(chat_id=message_or_query.from_user.id, text=welcome_text, reply_markup=keyboard, parse_mode=ParseMode.HTML)
    
@dp.callback_query_handler(lambda c: c.data)  
async def handle_callback(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    if callback_query.data == 'registration':
        reg_text = (
            "‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –∏ –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–π–¥–∏ –≤ –±–æ—Ç–∞."
        )
        
        link_btn = InlineKeyboardButton("üîó –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", url=registration_url)
        main_menu_btn = InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')
        reg_keyboard = InlineKeyboardMarkup().add(link_btn, main_menu_btn)
        await bot.send_message(callback_query.from_user.id, reg_text, reply_markup=reg_keyboard)

    elif callback_query.data == 'instruction':
        instruction_text = (
    "–ë–æ—Ç –æ—Å–Ω–æ–≤–∞–Ω –∏ –æ–±—É—á–µ–Ω –Ω–∞ –∫–ª–∞—Å—Ç–µ—Ä–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –æ—Ç OpenA üñ•<b>[ChatGPT-v4]</b>.\n\n"
    "–î–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –±–æ—Ç–∞ –±—ã–ª–æ —Å—ã–≥—Ä–∞–Ω–æ üé∞8000+ –∏–≥—Ä.\n"
    "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –¥–µ–ª–∞—é—Ç –≤ –¥–µ–Ω—å 20-30% –æ—Ç —Å–≤–æ–µ–≥–æ üí∏–∫–∞–ø–∏—Ç–∞–ª–∞!\n\n"
    "<b><code style=\"color: blue;\">–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –±–æ—Ç –≤—Å—ë –µ—â—ë –æ–±—É—á–∞–µ—Ç—Å—è –∏ —Ç–æ—á–Ω–æ—Å—Ç—å\n"
    "–±–æ—Ç–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 85%!</code></b>\n\n"
    "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏—Ç–∞ —Å–ª–µ–¥—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–µ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:\n\n\n"
    f"üî∏ 1. –ü—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ –±—É–∫–º–µ–∫–µ—Ä—Å–∫–æ–π –∫–æ–Ω—Ç–æ—Ä–µ {hlink('1WIN', url=registration_url)}\n"
    "–ï—Å–ª–∏ –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è - –∑–∞—Ö–æ–¥–∏–º —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º VPN (–®–≤–µ—Ü–∏—è).\n"
    f"–Ø –ø–æ–ª—å–∑—É—é—Å—å VPN Super Unlimited Proxy\n{hlink('ANDROID', 'https://play.google.com/store/apps/details?id=com.free.vpn.super.hotspot.open')}\n"
    f"{hlink('IOS', 'https://apps.apple.com/ru/app/vpn-super-vpn-%D0%B2%D0%BF%D0%BD-%D0%BF%D1%80%D0%BE%D0%BA%D1%81%D0%B8/id1370293473')}\n"
    "<b><code style=\"color: blue;\">–ë–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø –∫ —Å–∏–≥–Ω–∞–ª–∞–º –Ω–µ –±—É–¥–µ—Ç –æ—Ç–∫—Ä—ã—Ç!</code></b>\n\n"
    "üî∏ 2. –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å —Å–≤–æ–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.\n\n"
    "üî∏ 3. –ü–µ—Ä–µ–π—Ç–∏ –≤ —Ä–∞–∑–¥–µ–ª 1win games –∏ –≤—ã–±—Ä–∞—Ç—å –∏–≥—Ä—É üí£\"MINES\".\n\n"
    "üî∏ 4. –í—ã—Å—Ç–∞–≤–∏—Ç—å –∫–æ–ª-–≤–æ –ª–æ–≤—É—à–µ–∫ –≤ —Ä–∞–∑–º–µ—Ä–µ —Ç—Ä—ë—Ö. –≠—Ç–æ –≤–∞–∂–Ω–æ!\n\n"
    "üî∏ 5. –ó–∞–ø—Ä–æ—Å–∏—Ç—å —Å–∏–≥–Ω–∞–ª –≤ –±–æ—Ç–µ –∏ —Å—Ç–∞–≤–∏—Ç—å –ø–æ —Å–∏–≥–Ω–∞–ª–∞–º –∏–∑ –±–æ—Ç–∞.\n\n"
    "üî∏ 6. –ü—Ä–∏ –Ω–µ—É–¥–∞—á–Ω–æ–º —Å–∏–≥–Ω–∞–ª–µ —Å–æ–≤–µ—Ç—É–µ–º —É–¥–≤–æ–∏—Ç—å(–•¬≤) —Å—Ç–∞–≤–∫—É —á—Ç–æ –±—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–∫—Ä—ã—Ç—å –ø–æ—Ç–µ—Ä—é –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–∏–µ–º —Å–∏–≥–Ω–∞–ª–µ."
        )
        with open('photos/1.jpg', 'rb') as photo_file:
            photo_stream = io.BytesIO(photo_file.read())
        await bot.send_photo(chat_id=callback_query.from_user.id, photo=photo_stream, caption=instruction_text, parse_mode=ParseMode.HTML)
        next_text = "–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–π–¥–∏ –±–æ—Ç—É.\n–í–∫–ª–∞–¥–∫–∞ <b>'–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ'</b> –∏ –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É –±—É–¥–µ—Ç –≤–∞—à ID\n–ö–æ—Ç–æ—Ä—ã–π –≤–∞–º –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞!"
        with open('photos/2.jpg', 'rb') as photo_file2:
            photo_stream2 = io.BytesIO(photo_file2.read())
            main_menu_btn = InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')
            reg_keyboard = InlineKeyboardMarkup().add(main_menu_btn)
        await bot.send_photo(chat_id=callback_query.from_user.id, photo=photo_stream2, caption=next_text, reply_markup=reg_keyboard, parse_mode=ParseMode.HTML)

    elif callback_query.data == 'signal':
        user_code = check_user_code(callback_query.from_user.id)
        if is_code_valid(user_code):
            random_photo_number = random.randint(1, 54)
            photo_path = f'varianty/{random_photo_number}.jpg'
            with open(photo_path, 'rb') as photo_file:
                photo_stream = io.BytesIO(photo_file.read())
            await bot.send_photo(chat_id=callback_query.from_user.id, photo=photo_stream, reply_markup=keyboard)
        else:
            instr_keyboard = InlineKeyboardMarkup().add(InlineKeyboardButton("üìö –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data='instruction'))
            await bot.send_message(callback_query.from_user.id, "–î–ª—è –Ω–∞—á–∞–ª–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å", reply_markup=instr_keyboard)


@dp.message_handler(lambda message: message.text.startswith('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:'))
async def register_user(message: types.Message):
    code = message.text.split('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:')[1].strip()
    add_code(code)
    await message.answer("–ö–æ–¥ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!", reply_markup=keyboard)

@dp.message_handler()
async def check_code(message: types.Message):
    user_id = message.from_user.id
    code = message.text.strip()

    if is_code_valid(code):
        add_user(user_id, code)
        await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–∏–≥–Ω–∞–ª–∞–º.", reply_markup=keyboard)
    else:
        await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")

if __name__ == '__main__':
    from aiogram import executor
    executor.start_polling(dp, skip_updates=True)
